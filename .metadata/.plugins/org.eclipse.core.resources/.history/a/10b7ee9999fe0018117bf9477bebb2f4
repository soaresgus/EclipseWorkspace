package me.ninjay.oneperfil.glad.comandos;

import java.util.ArrayList;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import me.ninjay.oneperfil.estruturas.EventosAPI;
import me.ninjay.oneperfil.glad.estruturas.EstruturaAdmin;
import me.ninjay.oneperfil.glad.estruturas.EstruturaJogador;
import me.ninjay.oneperfil.glad.estruturas.EstruturaTempo3;
import me.ninjay.oneperfil.main.Main;
import net.eduard.api.lib.modules.VaultAPI;
import net.sacredlabyrinth.phaed.simpleclans.ClanPlayer;
import net.sacredlabyrinth.phaed.simpleclans.SimpleClans;

public class ComandoGlad implements CommandExecutor {

	private static ArrayList<Player> clans = new ArrayList<>();
    SimpleClans sc = SimpleClans.getInstance();
	
	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String lb, String[] args) {
		if (sender instanceof Player) {
			Player p = (Player) sender;
			if (args.length == 0) {
				p.sendMessage("§cComando não encontrado. Utilze /gladiator ajuda.");
				return true;
			}
			String sub = args[0];

			if (sub.equalsIgnoreCase("ajuda")) {
				if (!p.hasPermission("glad.admin")) {
					EstruturaJogador.ajudajog(p);
					return true;
				}
			}
			if (sub.equalsIgnoreCase("ajuda")) {
				if (p.hasPermission("glad.admin")) {
					EstruturaAdmin.ajudastf(p);
					return true;
				}
			}
			if (sub.equalsIgnoreCase("info")) {
				
				p.sendMessage("§6§lEvento - Gladiator\n \n§6Jogadores no evento: §e"+Main.dentro3.size()+"\n§6Clans no evento: §e"+clans.size());
			}
			if (sub.equalsIgnoreCase("entrar")) {
				if (Main.tempo3 == EstruturaTempo3.PRE3) {
					EstruturaJogador.entrar(p);
					if(sc.getClanManager().getClanPlayer(p) != null) {
						clans.add(p);
					}else {
						return true;
					}
					for (Player todos : Bukkit.getOnlinePlayers()) {
						if (todos.hasPermission("glad.pvp")) {
							todos.getWorld().setPVP(false);

							return true;
						}
					}
				}
			}

			if (sub.equalsIgnoreCase("entrar")) {
				if (Main.tempo3 == null) {
					p.sendMessage("§cO evento Gladiator não está ocorrendo no momento.");
					return true;
				}

				if (sub.equalsIgnoreCase("entrar")) {
					if (Main.fora3.contains(p)) {
						p.sendMessage("§cVocê já morreu, tente novamente na próxima vez.");
						return true;
					}
					if (sub.equalsIgnoreCase("entrar")) {
						if (Main.tempo3 == EstruturaTempo3.JOGO3) {
							p.sendMessage("§cO evento Gladiator já iniciou.");
							return true;
						}

					}
				}
			}

			if (sub.equalsIgnoreCase("setspawn")) {
				if (p.hasPermission("glad.admin")) {
					EstruturaAdmin.setspawn(p);

				} else {
					return true;
				}

			}

			if (sub.equalsIgnoreCase("setjogo")) {
				if (p.hasPermission("glad.admin")) {
					EstruturaAdmin.setjogo(p);
				} else {
					return true;
				}

			}
			if (sub.equalsIgnoreCase("setmorte")) {
				if (p.hasPermission("glad.admin")) {
					EstruturaAdmin.setmorte(p);
				} else {
					return true;
				}

			}

			if (sub.equalsIgnoreCase("setganhador")) {
				if (p.hasPermission("glad.admin")) {
					if (Main.tempo3 == EstruturaTempo3.JOGO3) {

						if (args.length <= 3) {
							p.sendMessage("§cUtilize /gladiator setganhador <tag> <clan> <líder>");
							return true;
						}
						Player j = Bukkit.getPlayer(args[3]);
						if (j == null) {
							p.sendMessage("§cJogador offline.");
							return true;
						}
						Bukkit.broadcastMessage("§6§lEvento - Gladiator\n \n§6O vencedor do evento foi o clan §e["
								+ args[1] + "] " + args[2] + " §6parabéns a todos que jogaram !");
						Main.tempo3 = null;
						VaultAPI.getEconomy().depositPlayer(j, 10);
						Main.wins.set(j.getName() + "_glad", EventosAPI.getWinsGlad(p, Main.wins) + 1);
					}
					for (Player todos2 : Bukkit.getOnlinePlayers()) {
						if (todos2.hasPermission("glad.jogando")) {
							todos2.teleport(Main.glad.getLocation("morte_glad"));

						}
					}
					for (Player todos : Bukkit.getOnlinePlayers()) {
						Main.dentro3.remove(todos);
						Main.fora3.remove(todos);
						VaultAPI.getPermission().playerRemove(todos, "glad.pvp");
						VaultAPI.getPermission().playerRemove(todos, "glad.jogando");
					}

				}

			}
			if (sub.equalsIgnoreCase("iniciar")) {
				if (p.hasPermission("glad.admin")) {
					if (Main.glad.contains("spawn_glad")) {
						if (Main.tempo3 == null) {
							EstruturaAdmin.iniciar(p);
							new BukkitRunnable() {
								int i = 20;

								@Override
								public void run() {
									i--;
									if (i == 0) {
										cancel();
										Main.tempo3 = EstruturaTempo3.JOGO3;
										Bukkit.broadcastMessage(
												"§6§lEvento - Gladiator\n \n§6O evento foi fechado e iniciado.\n ");
										for (Player todos2 : Bukkit.getOnlinePlayers()) {
											if (todos2.hasPermission("glad.pvp")) {
												todos2.getWorld().setPVP(true);

												for (Player todos : Bukkit.getOnlinePlayers()) {
													if (todos.hasPermission("glad.jogando")) {
														EstruturaJogador.inicio(todos);
													}
												}
											}

										}
									}
								}
							}.runTaskTimer(Main.getPlugin(Main.class), 20, 20);
						}
					}
				}
			}
			if (sub.equalsIgnoreCase("removeplayer")) {
				if (p.hasPermission("glad.admin")) {
					if (args.length == 1) {
						p.sendMessage("§cUtilize /gladiator removeplayer <nick>.");
						return true;
					} else {
						Player j = Bukkit.getPlayer(args[1]);
						if (j == null) {
							p.sendMessage("§cJogador offline.");
						}
						if (Main.dentro3.contains(j)) {
							j.sendMessage("§cVocê foi removido do evento por " + p.getName());
							p.teleport(Main.glad.getLocation("morte_glad"));
							Main.dentro3.remove(p);
							Main.fora3.add(p);
							VaultAPI.getPermission().playerRemove(p, "glad.pvp");
							VaultAPI.getPermission().playerRemove(p, "glad.jogando");
						}
						if (Main.fora3.contains(j)) {
							p.sendMessage("§cEsse jogador já está fora do evento.");
						}
						if (Main.tempo3 == null) {
							p.sendMessage("§cO evento gladiator não está ocorrendo.");
						}
					}
				}
			}
			if (sub.equalsIgnoreCase("cancelar")) {
				if (p.hasPermission("glad.admin")) {
					if (Main.tempo3 == EstruturaTempo3.PRE3) {
						Main.tempo3 = null;
						Bukkit.broadcastMessage("§cO evento gladiator foi cancelado por " + p.getName());
						for (Player todos2 : Bukkit.getOnlinePlayers()) {
							if (todos2.hasPermission("glad.jogando")) {
								todos2.teleport(Main.glad.getLocation("morte_glad"));
							}
						}

						for (Player todos : Bukkit.getOnlinePlayers()) {
							Main.dentro3.remove(todos);
							Main.fora3.remove(todos);
							VaultAPI.getPermission().playerRemove(todos, "glad.pvp");
							VaultAPI.getPermission().playerRemove(todos, "glad.jogando");

						}
					}

				}
			}
			if (sub.equalsIgnoreCase("cancelar")) {
				if (p.hasPermission("glad.admin")) {
					if (Main.tempo3 == EstruturaTempo3.JOGO3) {
						Main.tempo3 = null;
						Bukkit.broadcastMessage("§cO evento gladiator foi cancelado por " + p.getName());
						for (Player todos2 : Bukkit.getOnlinePlayers()) {
							if (todos2.hasPermission("glad.jogando")) {
								todos2.teleport(Main.glad.getLocation("morte_glad"));
							}
						}

						for (Player todos : Bukkit.getOnlinePlayers()) {
							Main.dentro3.remove(todos);
							Main.fora3.remove(todos);
							VaultAPI.getPermission().playerRemove(todos, "glad.pvp");
							VaultAPI.getPermission().playerRemove(todos, "glad.jogando");

						}
					}

				}
			}
			if (sub.equalsIgnoreCase("cancelar")) {
				if (p.hasPermission("glad.admin")) {
					if (Main.tempo3 == null) {
						p.sendMessage("§cO evento gladiator não está ocorrendo.");

					}

				}
			}

		}
		return false;
	}

}
